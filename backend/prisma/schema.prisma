// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  passwordHash  String   @map("password_hash")
  name          String
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Profile
  roles              String   @default("[]") // JSON array
  primaryRole        String?  @map("primary_role")
  experienceLevel    String?  @map("experience_level")
  motivationStyle    String   @default("positive") @map("motivation_style")
  isAutistic         Boolean  @default(false) @map("is_autistic")

  // Settings
  educationLevel     String?  @map("education_level")
  childAge           String?  @map("child_age")
  isCoParenting      Boolean  @default(false) @map("is_co_parenting")
  industry           String?
  interests          String   @default("[]") // JSON array
  gamingPreferences  String   @default("[]") @map("gaming_preferences") // JSON array
  calendarApp        String   @default("google") @map("calendar_app")
  notificationFreq   String   @default("standard") @map("notification_frequency")

  // Stats
  tasksCompleted     Int      @default(0) @map("tasks_completed")
  currentStreak      Int      @default(0) @map("current_streak")
  longestStreak      Int      @default(0) @map("longest_streak")
  lastTaskDate       DateTime? @map("last_task_date")
  totalPoints        Int      @default(0) @map("total_points")

  // Flags
  onboardingComplete Boolean  @default(false) @map("onboarding_complete")
  tourComplete       Boolean  @default(false) @map("tour_complete")
  checklistDismissed Boolean  @default(false) @map("checklist_dismissed")
  calendarConnected  Boolean  @default(false) @map("calendar_connected")

  // Relations
  tasks              Task[]
  achievements       Achievement[]
  calendarConnections CalendarConnection[]
  ownedTeams         Team[]   @relation("TeamOwner")
  teamMemberships    TeamMember[]

  @@map("users")
}

model Task {
  id              String   @id @default(uuid())
  userId          String   @map("user_id")
  title           String
  description     String?

  // Categorization
  context         String?
  category        String?
  priority        String   @default("medium")

  // Timing
  dueDate         DateTime? @map("due_date")
  estimatedDuration Int?    @map("estimated_duration")
  actualDuration  Int?     @map("actual_duration")

  // Status
  completed       Boolean  @default(false)
  completedAt     DateTime? @map("completed_at")

  // Calendar Integration
  calendarEventId String?  @map("calendar_event_id")
  calendarProvider String? @map("calendar_provider")

  // Metadata
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  createdVia      String   @default("text") @map("created_via")

  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sharedWith      SharedTask[]

  @@index([userId, context])
  @@index([userId, completed])
  @@index([dueDate])
  @@map("tasks")
}

model Achievement {
  id              String   @id @default(uuid())
  userId          String   @map("user_id")
  achievementType String   @map("achievement_type")
  unlockedAt      DateTime @default(now()) @map("unlocked_at")

  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementType])
  @@map("achievements")
}

model CalendarConnection {
  id              String   @id @default(uuid())
  userId          String   @map("user_id")
  provider        String

  // OAuth Tokens
  accessToken     String   @map("access_token")
  refreshToken    String?  @map("refresh_token")
  tokenExpiresAt  DateTime? @map("token_expires_at")

  // Settings
  syncEnabled     Boolean  @default(true) @map("sync_enabled")
  lastSyncAt      DateTime? @map("last_sync_at")

  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider])
  @@map("calendar_connections")
}

model Team {
  id              String   @id @default(uuid())
  name            String
  ownerId         String   @map("owner_id")

  // Settings
  teamSize        Int?     @map("team_size")
  industry        String?

  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  owner           User     @relation("TeamOwner", fields: [ownerId], references: [id])
  members         TeamMember[]
  sharedTasks     SharedTask[]

  @@map("teams")
}

model TeamMember {
  id              String   @id @default(uuid())
  teamId          String   @map("team_id")
  userId          String   @map("user_id")
  role            String   @default("member")
  joinedAt        DateTime @default(now()) @map("joined_at")

  // Relations
  team            Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@map("team_members")
}

model SharedTask {
  taskId          String   @map("task_id")
  teamId          String   @map("team_id")
  assignedTo      String?  @map("assigned_to")

  // Relations
  task            Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  team            Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@id([taskId, teamId])
  @@map("shared_tasks")
}

